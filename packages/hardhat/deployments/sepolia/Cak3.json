{
  "address": "0x30ddee2e04d5Fed8273459211433Db2eC882BE35",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "name": "CompanyCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "companies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "companyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holdingsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_companyOwner",
          "type": "address"
        }
      ],
      "name": "createCompany",
      "outputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCompaniesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCompany",
      "outputs": [
        {
          "internalType": "address",
          "name": "company",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x44f5636a6cc4de8d652d584d753c211a85ee12d72e038a59fe94ba8f5ab3e89d",
  "receipt": {
    "to": null,
    "from": "0xfa7eDC53d9CBfAB24347Bd6e5C64c8BE28452047",
    "contractAddress": "0x30ddee2e04d5Fed8273459211433Db2eC882BE35",
    "transactionIndex": 35,
    "gasUsed": "2098438",
    "logsBloom": "0x
    "blockHash": "0xd401d2a5002c868f77bcedb035185911771b8332a13bd223a46e5c4aef3c40d2",
    "transactionHash": "0x44f5636a6cc4de8d652d584d753c211a85ee12d72e038a59fe94ba8f5ab3e89d",
    "logs": [],
    "blockNumber": 6305297,
    "cumulativeGasUsed": "8181673",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9ad7b4b93a5e63d2fc427a2de16d3b6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"name\":\"CompanyCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"companies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"companyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holdingsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_companyOwner\",\"type\":\"address\"}],\"name\":\"createCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCompaniesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCompany\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"company\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Factory contract to create instances of the Company contract.\",\"events\":{\"CompanyCreated(address)\":{\"params\":{\"company\":\"The address of the newly created Company contract.\"}}},\"kind\":\"dev\",\"methods\":{\"createCompany(address,address)\":{\"params\":{\"_companyOwner\":\"Address in charge of administering holdings\",\"_holdingsToken\":\"Address of the token to manage liquidity\"},\"returns\":{\"company\":\"The address of the newly created Company contract.\"}},\"getCompaniesCount()\":{\"returns\":{\"count\":\"The total number of created Company contracts.\"}},\"getCompany(uint256)\":{\"params\":{\"index\":\"The index of the Company contract in the array.\"},\"returns\":{\"company\":\"The address of the Company contract.\"}}},\"title\":\"Cake\",\"version\":1},\"userdoc\":{\"events\":{\"CompanyCreated(address)\":{\"notice\":\"Event emitted when a new Company is created.\"}},\"kind\":\"user\",\"methods\":{\"createCompany(address,address)\":{\"notice\":\"Creates a new Company instance.\"},\"getCompaniesCount()\":{\"notice\":\"Returns the total number of created Company instances.\"},\"getCompany(uint256)\":{\"notice\":\"Returns the address of the Company contract at a specific index.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Cak3.sol\":\"Cak3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Cak3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Company} from \\\"./Company.sol\\\";\\n\\n\\n/**\\n * @title Cake\\n * @dev Factory contract to create instances of the Company contract.\\n */\\ncontract Cak3 {\\n    // Array to keep track of created Company instances\\n    mapping( uint256 => address) public companies;\\n    uint256 public companyCount;\\n\\n    /**\\n     * @notice Event emitted when a new Company is created.\\n     * @param company The address of the newly created Company contract.\\n     */\\n    event CompanyCreated(address indexed company);\\n\\n    /**\\n     * @notice Creates a new Company instance.\\n     * @param _holdingsToken Address of the token to manage liquidity\\n     * @param _companyOwner Address in charge of administering holdings\\n     * @return company The address of the newly created Company contract.\\n     */\\n    function createCompany(address _holdingsToken, address _companyOwner ) external returns (address company) {\\n        Company newCompany = new Company(_holdingsToken, _companyOwner);\\n        companies[companyCount] = address(newCompany);\\n        emit CompanyCreated(address(newCompany));\\n        return address(newCompany);\\n    }\\n\\n    /**\\n     * @notice Returns the total number of created Company instances.\\n     * @return count The total number of created Company contracts.\\n     */\\n    function getCompaniesCount() external view returns (uint256 count) {\\n        return companyCount;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the Company contract at a specific index.\\n     * @param index The index of the Company contract in the array.\\n     * @return company The address of the Company contract.\\n     */\\n    function getCompany(uint256 index) external view returns (address company) {\\n        return address(companies[index]);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x47e8f6a2e8d3f1cde4fb6ca93ea79021f59c51687a6179515f1f843485c4019a\",\"license\":\"MIT\"},\"contracts/Company.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IFundingRound} from \\\"./interfaces/IFundingRound.sol\\\";\\nimport {FundingRound} from \\\"./FundingRound.sol\\\";\\n\\n/**\\n * @title Company\\n * @dev This contract allows companies to create funding rounds, and execute payrole payment\\n */\\ncontract Company is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice token holding all the capital\\n    IERC20 public immutable token;\\n\\n    /// @notice numeric identifier of an employee\\n    mapping( address => uint256) public employeeId;\\n    /// @notice relationship holder between address and their current salaires;\\n    mapping( address => uint256) public salaries;\\n\\n    /// @notice iterable list of employees\\n    address[1000] public employees;\\n    /// @notice count of registered employees\\n    uint256 public employeeCount;\\n\\n    FundingRound[100] public rounds;\\n    uint256 public roundCount;\\n\\n    event LaunchedFundingRound(address indexed roundAddress, address indexed owner);\\n\\n    constructor(address _holdingsToken, address _owner) Ownable() {\\n        token = IERC20(_holdingsToken);\\n        transferOwnership(_owner);\\n\\n    }\\n\\n    function createFundingRound(\\n        address _owner,\\n        address _usdc,\\n        uint256 _goal,\\n        bool _whitelistEnabled,\\n        address[] memory _whitelist\\n    ) external returns (address) {\\n        require(_owner != address(0), \\\"Owner address cannot be zero.\\\");\\n        require(_goal > 0, \\\"Goal amount must be greater than zero.\\\");\\n\\n        // FundingRound newRound  = new FundingRound(\\n\\n        rounds[roundCount] = new FundingRound(\\n            address(this), _usdc, _goal, _whitelistEnabled, _whitelist\\n        );\\n        address newRound = address(rounds[roundCount]);\\n        roundCount++;\\n\\n        emit LaunchedFundingRound(newRound, _owner);\\n\\n        return newRound;\\n    }\\n\\n    function addEmployees(address[] calldata _employees, uint256[] calldata _salaries) external onlyOwner {\\n        require( _employees.length == _salaries.length, \\\"Employee - Salary, lenght missmatch\\\");\\n\\n        for(uint256 i = 0; i < _employees.length; i++) {\\n\\n            address employeeAddress = _employees[i];\\n            uint256 salary = _salaries[i];\\n\\n            require(salaries[employeeAddress] == 0, \\\"Duplicated employee Record\\\");\\n\\n            employeeId[employeeAddress] = employeeCount;\\n            employees[employeeCount] = employeeAddress;\\n            salaries[employeeAddress] = salary;\\n\\n            employeeCount++;\\n\\n        }\\n\\n    }\\n\\n    function addFoundingRound() external onlyOwner {\\n\\n    }\\n\\n    function liquidBalance() public view returns(uint256){\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function executePeriodPayroll() onlyOwner external {\\n        uint256 _liquidBalance =  liquidBalance();\\n\\n        for(uint256 i = 0; i < employeeCount; i++) {\\n\\n            address employee = employees[i];\\n            uint256 salary = salaries[employee];\\n\\n            if(employee == address(0) || salaries[employee] == 0){ break; }\\n\\n            require(salary <= _liquidBalance, \\\"Not enought balance to cover payrole\\\");\\n\\n            token.transfer(employee, salary);\\n            _liquidBalance -= salary;\\n\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x4cb4d9db11b225a969f41c4b2a3747462753d05f00374534e1cb20bd248a7f1c\",\"license\":\"MIT\"},\"contracts/FundingRound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title FundingRound\\n * @dev This contract allows investors to deposit USDC until a capital raised goal is reached.\\n * Optionally, an investor whitelist can be specified at construction.\\n */\\ncontract FundingRound is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Address of the USDC token contract.\\n    IERC20 public immutable usdc;\\n    /// @notice Capital raised goal in USDC.\\n    uint256 public immutable goal;\\n    /// @notice controls if the whitelist is in effect or not\\n    bool public immutable whitelistEnabled;\\n    /// @notice Total amount of USDC raised.\\n    uint256 public totalRaised;\\n    /// @notice Total amount of USDC withdrawn.\\n    uint256 public totalWithdrawn;\\n    // @notice keeps the count of investors\\n    uint256 public investorCount;\\n    // @notice iterable list (array) of investors\\n    address[1000] public invested;\\n    /// @notice Mapping to track individual contributions.\\n    mapping(address => uint256) public contributions;\\n    /// @notice Mapping for whitelist of approved investors.\\n    mapping(address => bool) public whitelist;\\n\\n    /**\\n     * @dev Emitted when an investor makes a contribution.\\n     * @param investor The address of the investor.\\n     * @param amount The amount of USDC contributed.\\n     */\\n    event Contribution(address indexed investor, uint256 amount);\\n\\n    /**\\n     * @dev Initializes the contract with the USDC token address, funding goal, and optionally a whitelist.\\n     * @param _usdc The address of the USDC token contract.\\n     * @param _goal The funding goal in USDC.\\n     * @param _whitelistEnabled Boolean indicating if whitelist is enabled.\\n     * @param _whitelistAddresses List of addresses to be whitelisted if whitelist is enabled.\\n     */\\n    constructor(\\n        address _owner,\\n        address _usdc,\\n        uint256 _goal,\\n        bool _whitelistEnabled,\\n        address[] memory _whitelistAddresses\\n    ) Ownable() {\\n        require(_usdc != address(0), \\\"USDC address cannot be zero.\\\");\\n        require(_goal > 0, \\\"Goal must be greater than zero.\\\");\\n\\n        // owner = _owner;\\n        usdc = IERC20(_usdc);\\n        goal = _goal;\\n        whitelistEnabled = _whitelistEnabled;\\n\\n        if (whitelistEnabled) {\\n            for (uint256 i = 0; i < _whitelistAddresses.length; i++) {\\n                whitelist[_whitelistAddresses[i]] = true;\\n            }\\n        }\\n        transferOwnership(_owner);\\n    }\\n\\n    /**\\n     * @notice Allows an investor to contribute USDC to the funding round.\\n     * @param amount The amount of USDC to contribute.\\n     */\\n    function contribute(uint256 amount) external {\\n        require(amount > 0, \\\"Contribution amount must be greater than zero.\\\");\\n        require(totalRaised + amount <= goal, \\\"Contribution exceeds funding goal.\\\");\\n\\n        if (whitelistEnabled) {\\n            require(whitelist[msg.sender], \\\"Investor is not whitelisted.\\\");\\n        }\\n\\n        usdc.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        if(contributions[msg.sender] == 0) {\\n            invested[investorCount] =  msg.sender;\\n            investorCount++;\\n        }\\n\\n        contributions[msg.sender] += amount;\\n        totalRaised += amount;\\n\\n        emit Contribution(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to add addresses to the whitelist.\\n     * @param _addresses List of addresses to be added to the whitelist.\\n     */\\n    function addToWhitelist(address[] calldata _addresses) external onlyOwner {\\n        require(whitelistEnabled, \\\"Whitelist is not enabled.\\\");\\n\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelist[_addresses[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the owner to remove addresses from the whitelist.\\n     * @param _addresses List of addresses to be removed from the whitelist.\\n     */\\n    function removeFromWhitelist(address[] calldata _addresses) external onlyOwner {\\n        require(whitelistEnabled, \\\"Whitelist is not enabled.\\\");\\n\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelist[_addresses[i]] = false;\\n        }\\n\\t//TODO: return money\\n    }\\n    /**\\n     * @notice Withdwars the raised money back to the Company contract\\n     */\\n    function withdrawInvestment() external onlyOwner returns(uint256) {\\n        uint256 lbalance = usdc.balanceOf(address(this));\\n        usdc.transfer(owner(),  lbalance);\\n        totalWithdrawn += lbalance;\\n        return lbalance;\\n    }\\n\\n    /**\\n     * @notice Allows investors to check their contribution amount.\\n     * @param investor The address of the investor.\\n     * @return The amount of USDC contributed by the investor.\\n     */\\n    function getContribution(address investor) external view returns (uint256) {\\n        return contributions[investor];\\n    }\\n}\\n\\n\",\"keccak256\":\"0x113d06c0b896ec11fc3dbac3071e7cd69b07771cc42a1e81d719d031287e1916\",\"license\":\"MIT\"},\"contracts/interfaces/IFundingRound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title IFundingRound\\n * @dev Interface for the FundingRound contract.\\n */\\ninterface IFundingRound {\\n\\n    /**\\n     * @notice Emitted when an investor makes a contribution.\\n     * @param investor The address of the investor.\\n     * @param amount The amount of USDC contributed.\\n     */\\n    event Contribution(address indexed investor, uint256 amount);\\n\\n    /**\\n     * @notice Allows an investor to contribute USDC to the funding round.\\n     * @param amount The amount of USDC to contribute.\\n     */\\n    function contribute(uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the owner to add addresses to the whitelist.\\n     * @param _addresses List of addresses to be added to the whitelist.\\n     */\\n    function addToWhitelist(address[] calldata _addresses) external;\\n\\n    /**\\n     * @notice Allows the owner to remove addresses from the whitelist.\\n     * @param _addresses List of addresses to be removed from the whitelist.\\n     */\\n    function removeFromWhitelist(address[] calldata _addresses) external;\\n\\n    /**\\n     * @notice Allows the owner to withdraw investments.\\n     * @return lbalance The balance withdrawn by the owner.\\n     */\\n    function withdrawInvestment() external returns (uint256 lbalance);\\n\\n    /**\\n     * @notice Allows investors to check their contribution amount.\\n     * @param investor The address of the investor.\\n     * @return The amount of USDC contributed by the investor.\\n     */\\n    function getContribution(address investor) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x9d1bbc7c3e1a4b4c55a49d77efb0502fb2f280c03b9df98e876a260a81b97b30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Factory contract to create instances of the Company contract.",
    "events": {
      "CompanyCreated(address)": {
        "params": {
          "company": "The address of the newly created Company contract."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "createCompany(address,address)": {
        "params": {
          "_companyOwner": "Address in charge of administering holdings",
          "_holdingsToken": "Address of the token to manage liquidity"
        },
        "returns": {
          "company": "The address of the newly created Company contract."
        }
      },
      "getCompaniesCount()": {
        "returns": {
          "count": "The total number of created Company contracts."
        }
      },
      "getCompany(uint256)": {
        "params": {
          "index": "The index of the Company contract in the array."
        },
        "returns": {
          "company": "The address of the Company contract."
        }
      }
    },
    "title": "Cake",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CompanyCreated(address)": {
        "notice": "Event emitted when a new Company is created."
      }
    },
    "kind": "user",
    "methods": {
      "createCompany(address,address)": {
        "notice": "Creates a new Company instance."
      },
      "getCompaniesCount()": {
        "notice": "Returns the total number of created Company instances."
      },
      "getCompany(uint256)": {
        "notice": "Returns the address of the Company contract at a specific index."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 971,
        "contract": "contracts/Cak3.sol:Cak3",
        "label": "companies",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 973,
        "contract": "contracts/Cak3.sol:Cak3",
        "label": "companyCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}